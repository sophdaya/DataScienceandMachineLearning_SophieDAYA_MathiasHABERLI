# -*- coding: utf-8 -*-
"""Streamlit_TEST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k3B6Fq2XCxQC47VnjKXWRPiGkoUBVg8x
"""

!pip install streamlit transformers datasets scikit-learn
!pip install --no-cache-dir accelerate

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import string

# Load the datasets
training_data_path = '/content/drive/MyDrive/training_data.csv'
training_data_pd = pd.read_csv(training_data_path)

# Function to clean text
def clean_text(text):
    text = text.lower()  # Convert text to lowercase
    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation
    text = " ".join(text.split())  # Remove extra whitespace
    return text

# Apply cleaning function to the sentence column
training_data_pd['sentence'] = training_data_pd['sentence'].apply(clean_text)

# Display the first few rows of the cleaned data to confirm changes
print(training_data_pd.head())

from transformers import CamembertTokenizer, CamembertForSequenceClassification
from sklearn.model_selection import train_test_split
from datasets import Dataset

# Load the tokenizer
tokenizer = CamembertTokenizer.from_pretrained('camembert-base')

# Function to encode data
def encode_data(tokenizer, df):
    texts = df['sentence'].tolist()
    labels = df['difficulty'].map({'A1': 0, 'A2': 1, 'B1': 2, 'B2': 3, 'C1': 4, 'C2': 5}).tolist()
    encodings = tokenizer(texts, truncation=True, padding='max_length', max_length=128)
    return Dataset.from_dict({
        'input_ids': encodings['input_ids'],
        'attention_mask': encodings['attention_mask'],
        'labels': labels
    })

# Split the DataFrame into training and validation sets
train_data, val_data = train_test_split(training_data_pd, test_size=0.10, random_state=42)

# Tokenize and prepare datasets
train_dataset = encode_data(tokenizer, train_data)
val_dataset = encode_data(tokenizer, val_data)

from transformers import TrainingArguments, Trainer, EarlyStoppingCallback
from datasets import load_metric
import numpy as np

# Load the model
model = CamembertForSequenceClassification.from_pretrained('camembert-base', num_labels=6)

# Metric for evaluation
def compute_metrics(eval_pred):
    metric = load_metric("accuracy")
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    accuracy = metric.compute(predictions=predictions, references=labels)
    return {"accuracy": accuracy['accuracy']}

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,  # Reduced epochs
    per_device_train_batch_size=16,  # Adjust batch size
    warmup_steps=500,  # Fewer warmup steps
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
    learning_rate=5e-5,  # Adjust learning rate
    fp16=False,  # Disable FP16 since it's not supported on CPUs
    evaluation_strategy="epoch",
    save_strategy="epoch",
    load_best_model_at_end=True,
    metric_for_best_model='accuracy',
    greater_is_better=True
)

# Initialize the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    compute_metrics=compute_metrics,
    callbacks=[EarlyStoppingCallback(early_stopping_patience=2)]  # Early stopping to avoid overfitting
)

# Train the model
trainer.train()

# Save the model and tokenizer
model.save_pretrained("./model")
tokenizer.save_pretrained("./model")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# from transformers import CamembertTokenizer, CamembertForSequenceClassification
# import torch
# import numpy as np
# 
# # Load the tokenizer and model
# model_path = "./model"
# tokenizer = CamembertTokenizer.from_pretrained(model_path)
# model = CamembertForSequenceClassification.from_pretrained(model_path)
# 
# # Define a function to predict the difficulty
# def predict_difficulty(text):
#     # Tokenize the input text
#     inputs = tokenizer(text, truncation=True, padding='max_length', max_length=128, return_tensors="pt")
# 
#     # Ensure the model is in evaluation mode and make predictions
#     model.eval()
#     with torch.no_grad():
#         outputs = model(**inputs)
#     logits = outputs.logits
#     predicted_class_id = torch.argmax(logits, dim=-1).item()
#     levels = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']
#     return levels[predicted_class_id]
# 
# # Streamlit app interface
# st.title("French Text Difficulty Predictor")
# st.write("Enter a French text and get its difficulty level predicted.")
# 
# # Text input
# user_input = st.text_area("Enter French text here:", "")
# 
# # Predict button
# if st.button("Predict Difficulty"):
#     if user_input.strip() == "":
#         st.write("Please enter a valid French text.")
#     else:
#         # Predict difficulty
#         difficulty = predict_difficulty(user_input)
#         st.write(f"The predicted difficulty level is: **{difficulty}**")
#

!jupyter nbconvert --to script Streamlit_App.ipynb

!mv Streamlit_TEST.py app.py